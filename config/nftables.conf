#!/usr/bin/nft -f

flush ruleset

# --- IMPORTANT ---
# You MUST customize the 'wan' definition with your system's actual
# network interface names. Use the `ip a` command to find them.
define wan = { enp1s0, wlan0 }
define eth = { wl*, en*, eth* }
define ts  = { tailscale* }
define wg  = { wg* }
define lo  = { lo, lo-* }

table inet filter {
  chain input {
    type filter hook input priority filter; policy drop;

    # allow established/related connections
    ct state {established, related} accept

    # early drop of invalid connections
    ct state invalid drop

    # allow from loopback
    iifname lo accept

    # allow from containers
    # iifname ve* accept
    # iifname ve* udp sport 68 udp dport 67 ip saddr 0.0.0.0 ip daddr 255.255.255.255 accept

    # allow icmp
    icmp   type { echo-request } accept
    icmpv6 type { echo-request } accept
    icmpv6 type { nd-router-advert, nd-router-solicit, nd-neighbor-solicit, nd-neighbor-advert } ip6 saddr fe80::/10 accept
    # ip6 nexthdr icmpv6 counter accept

    # Allow ssh
    tcp dport ssh accept
    # tcp dport 38607 accept

    # tcp dport 6286 accept   # Shadowsocks
    # udp dport 41641 accept  # tailscale

    # goto will not return to the chain
    iifname $ts  goto ts
    iifname $eth goto ens

    # Allow http / https
    # tcp dport http accept
    # tcp dport https accept

    # tcp dport https limit rate 256 kbytes/second burst 1 mbytes accept
    # tcp dport http limit rate 32 kbytes/second accept

    # Allow transmission bittorrent
    # tcp dport 51413 accept
    # udp dport 51413 accept

    # tcp dport 25565 accept  # Minecraft
    # udp dport 51820 accept  # Wireguard

    # Allow private ip
    # ip saddr 10.0.0.0/8 accept
    # ip saddr 172.16.0.0/12 accept
    # ip saddr 192.168.0.0/16 accept
    # ip6 saddr fc00::/7 accept

    # iifname cni-* accept

    # Debug rejected traffic
    # meta nftrace set 1 counter

    # everything else
    # reject with icmpx type port-unreachable

    # meta nftrace set 1
    # ip protocol tcp counter return
    # ip protocol udp counter return
    # counter
  }

  chain ens {
    # ip protocol 41 counter accept  # ipv6 tunnel
    # udp sport 68 udp dport 67 ip saddr 0.0.0.0 ip daddr 255.255.255.255 counter accept  # dhcp discover
    # udp dport 53 accept
  }

  chain ts {
  }

  chain forward {
    type filter hook forward priority filter; policy drop;

    # tcp flags syn tcp option maxseg size set rt mtu

    ct state {related, established} accept
    ct state invalid drop

    # Allow forwarding from containers
    # iifname ve* accept
  }

  chain output {
    type filter hook output priority filter; policy accept
  }

  chain route {
    type route hook output priority filter;
    # ip daddr {10.0.0.0/8, 192.168.0.0/16} return
  }
}

table inet nat {
  chain postrouting {
    type nat hook postrouting priority srcnat;

    # iifname $eth oifname $wan masquerade
    # iifname ve* oifname $wan masquerade
  }

  chain prerouting {
    type nat hook prerouting priority dstnat;
  }
}

# vim:set sts=2 ts=2 sw=2 et:
