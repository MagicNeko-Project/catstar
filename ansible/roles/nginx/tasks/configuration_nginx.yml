- name: Copy Nginx Configuration
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ (nginx_root, dest) | path_join }}"
    mode: 0644
    lstrip_blocks: yes
  vars:
    dest: "{{ item | regex_replace('.*templates/nginx/(.+)\\.j2$', '\\1') }}"
  notify: reload nginx
  with_fileglob:
    - "templates/nginx/*.j2"
    - "templates/nginx/conf.d/*.j2"
    - "templates/nginx/snippets/*.j2"

- name: Create htpasswd files
  ansible.builtin.template:
    src: htpasswd.j2
    dest: /etc/nginx/htpasswd_{{ item.key }}
    mode: 0640
    owner: root
    group: "{{ nginx_user }}"
  loop: "{{ htpasswd | dict2items }}"
  when: htpasswd is defined

- name: Copy Nginx sites available files templates
  ansible.builtin.template:
    src: "sites-available/{{ site.template | default('generic') }}.j2"
    dest: "{{ (nginx_root, nginx_sites_available, item.key) | path_join }}"
    mode: 0644
    lstrip_blocks: yes
  vars:
    site_name: "{{ item.key }}"
    site: "{{ item.value }}"
  with_dict: "{{ sites_enabled }}"
  notify: reload nginx

- name: Enable Nginx sites
  ansible.builtin.file:
    src: "{{ (nginx_root, nginx_sites_available, item.key) | path_join }}"
    dest: "{{ (nginx_root, nginx_sites_enabled, item.key) | path_join }}"
    state: link
  with_dict: "{{ sites_enabled }}"
  when: item.value.enabled | default(True)
  notify: reload nginx

- name: Disable Nginx sites
  ansible.builtin.file:
    path: "{{ (nginx_root, nginx_sites_enabled, item) | path_join }}"
    state: absent
  loop: "{{ sites_disabled | default([], true) }}"
  notify: reload nginx
